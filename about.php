
<!DOCTYPE html>
<html>
<head>
    <title>About - Protein Fetcher Tool</title>
    <link rel="stylesheet" href="styles_new.css">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            line-height: 1.6; 
            width: 90%; 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        h1 { 
            color: #006400; 
            text-align: center; 
            margin-bottom: 30px; 
        }
        h2 { 
            color: #006400; 
            margin-top: 40px; 
            border-bottom: 2px solid #ecf0f1; 
            padding-bottom: 8px; 
        }
        ul { 
            margin: 15px 0 25px 0; 
            padding-left: 30px; 
        }
        li { 
            margin-bottom: 15px; 
        }
        p { 
            margin: 15px 0; 
        }
        .top-nav { 
            text-align: center; 
            margin-bottom: 30px; 
            width: 100vw; 
            position: relative; 
            left: 50%; 
            transform: translateX(-50%); 
            padding: 10px 0; 
        }
    </style>
</head>
<body>
    <nav class="top-nav">
        <a href="indexx.html"><button>Home</button></a>
        <a href="about.php"><button>About</button></a>
        <a href="analysis_tool.php"><button>Analysis Tool</button></a>
        <a href="help.php"><button>Help</button></a>
        <a href="credits.php"><button>Credits</button></a>
    </nav>
    <h1>About the Protein Fetcher Tool</h1>

    <h2>Overview</h2>
    <p>The Protein Fetcher Tool is a web-based bioinformatics demo platform designed to simplify protein sequence retrieval and analysis for researchers and enthusiasts. Hosted on a university server, it combines a PHP-driven frontend with a Python-powered backend for a smooth user experience.</p>
    <p>To access the code and for further clarifications, visit <a href="https://github.com/B270917-2024/IWD2">My GitHub repository</a>


    <h2>User Interface</h2>
    <ul>
        <li>Powered by PHP, with `analysis_tool.php` as the hub for inputting protein names and taxonomic filters via a form.</li>
        <li>Uses session management to track user interactions across pages for traceability.</li>
        <li>Renders results as text files in iframes, PNG plots as images, and HTML reports for advanced outputs.</li>
    </ul>

    <h2>Sequence Retrieval</h2>
    <ul>
        <li>`biopython_connect.py` fetches sequences from NCBIâ€™s Entrez database using BioPython, triggered by `analysis_tool.php` inputs.</li>
        <li>Saves FASTA files to a temporary directory, with retry logic to handle API rate limits efficiently.</li>
    </ul>

    <h2>Analysis Pipeline</h2>
    <ul>
        <li><strong>MSA and Conservation</strong>: `analyze.php` calls `clustal_analyze.py` via subprocesses, using Clustal Omega for MSA, computing a Shannon entropy-based conservation score, and generating line and MSA grid plots, output as JSON.</li>
        <li><strong>Motif Scanning</strong>: `motifscan.php` runs PatMatMotifs to identify motifs, producing a downloadable text file shown in an iframe.</li>
        <li><strong>Advanced Analysis</strong>: `advanced.php` drives `advanced_analysis.py` for phylogenetic trees, Garnier secondary structure prediction, and PDB 3D structure retrieval, outputting PNG plots and a downloadable HTML report.</li>
    </ul>

    <h2>Data Management</h2>
    <ul>
        <li>Stores temporary files in a dedicated directory, with cleanup to manage disk space.</li>
        <li>`sqlconnect.php` interfaces with a MySQL database using PDO for flexible, secure queries, storing job metadata (file paths, session IDs) and retrieving them dynamically.</li>
        <li>The example dataset (glucose-6-phosphatase from Aves) is pre-generated by `generate_example.py` and served statically from an output directory.</li>
    </ul>

    <h2>Backend Execution</h2>
    <ul>
        <li>Manages dependencies (NumPy, Matplotlib, Seaborn) in a Python virtual environment, with Bash and Awk scripts assisting file processing where needed, and Git/GitHub for version control.</li>
        <li>Uses subprocesses to run external tools (Clustal Omega, PatMatMotifs) and custom scripts, guided by environment variables for file paths and session IDs.</li>
    </ul>

    <h2>Example Feature</h2>
    <ul>
        <li>`example_results.php` displays a pre-processed dataset with conservation scores, MSA plots, motif scans, and advanced reports.</li>
        <li>`generate_example.py` pre-runs the pipeline, storing results in an output directory for direct web access as a "try before you buy" demo.</li>
    </ul>

    <h2>Design Principles</h2>
    <ul>
        <li>Handles errors (API failures, tool crashes, typos) with PHP error reporting for reliability.</li>
        <li>Balances performance and maintainability, with scalability for future expansions.</li>
    </ul>
</body>
</html>
